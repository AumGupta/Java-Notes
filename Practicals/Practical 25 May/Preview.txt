                                    Practical May 25
                                    _________________
                                    Om Gupta 214047
                                    _________________

1) Ques 1 from practical list

CODE:

class Complex {
    int x; //Real Part
    int y; //Complex Part

    Complex(){
        x = 0;
        y = 0;
    }

    Complex(int x){
        this.x = x;
        y = 0;
    }

    Complex(int x, int y){
        this.x = x;
        this.y = y;
    }

    Complex add(Complex b){
        Complex tmp = new Complex((this.x + b.x) , (this.y + b.y));
        return tmp;
    }

    Complex multiply(Complex b){
        Complex tmp = new Complex((this.x * b.x) , (this.y * b.y));
        return tmp;
    }

    String to_string() {
        return (x + " + i" + y );
    }

    //Demo
    public static void main(String[] args) {
        Complex C1 = new Complex(4,5);
        Complex C2 = new Complex(1,2);

        System.out.println("Given Complex Numbers:\nC1 = "+ C1.to_string() + "\nC2 = " + C2.to_string());
        System.out.println("Sum of C1 and C2     = "+ (C1.add(C2)).to_string() );
        System.out.println("Product of C1 and C2 = "+ (C1.multiply(C2)).to_string() );
    }
}

******************************************************************************************

2) A class called Employee, which models an employee with an ID, name and salary, is designed as shown in the following class diagram. The method raiseSalary(percent) increases the salary by the given percentage. Write the Employee class and a test driver class EmployeeDemo.

CODE:

import java.util.Scanner;

public class Employee {
    int id;
    String firstName;
    String lastName;
    int salary;

    Employee(int id, String firstName, String lastName, int salary){
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
        this.salary= salary;
    }

    int getID() {
        return id;
    }

    String getFirstName() {
        return firstName;
    }

    String getLastName() {
        return lastName;
    }

    String getName() {
        return firstName+lastName;
    }

    int getSalary() {
        return salary;
    }

    void setSalary(int salary) {
        this.salary = salary;
    }

    int getAnnualSalary(){
        return salary*12;
    }

    int raiseSalary(double percent){
        salary += salary*(percent/100.0);
        return salary;
    }

    String to_string(){
        return ("Employee [id-"+id+", name-"+firstName+" "+lastName+", salary-"+salary+"]");
    }
}



class EmployeeDemo {
    public static void main(String[] args) {
        Employee emp1 = new Employee(8, "Peter", "Tan", 2500);
        System.out.println( emp1.to_string() );
        emp1.setSalary(999);
        System.out.println( emp1.to_string() );
        System.out.println( "id is: " + emp1.getID() );
        System.out.println( "firstname is: " + emp1.getFirstName() );
        System.out.println( "lastname is: " + emp1.getLastName() );
        System.out.println( "salary is: " + emp1.getSalary() );
        
        Scanner in = new Scanner(System.in);
        int newSalary = in.nextInt();
        emp1.setSalary(newSalary);
        System.out.println( emp1.to_string() );
        in.close();
    }
}

******************************************************************************************
//Om Gupta 214047
3) A class called MyPolynomial, which models polynomials of degree-n (see equation), is designed as shown in the class diagram.
It contains:
An instance variable named coeffs, which stores the coefficients of the n-degree polynomial in a double array of size n+1, where c0 is kept at index 0.
A constructor MyPolynomial(coeffs:double[]) that takes a double array to initialize the coefficients. 
double coefficients[] = {1.2, 3.4, 5.6, 7.8};
MyPolynomial p1 = new MyPolynomial(coefficients);
A method getDegree() that returns the degree of this polynomial.
A method toString() that returns "cnx^n+cn-1x^(n-1)+...+c1x+c0".
A method evaluate(double x) evaluates the polynomial for the given x, by substituting the given x into the polynomial expression.
Method add() that adds this polynomial with the given MyPolynomial instance another, and returns this instance that contains the result.
 
Write the MyPolynomial class. Also write a test driver (called MyPolynomialDemo) to test all the methods defined in the class.


CODE:

public class MyPolynomial {
    double[] coeffs;

    MyPolynomial(double[] coeffs){
        this.coeffs = coeffs;
    }

    int getDegree(){
        return coeffs.length - 1;
    }

    String to_string(){
        String tmp = "";
        for (int i = coeffs.length-1; i>0; i--){
            tmp += coeffs[i]+"x^"+i+" + ";
        }
        return tmp + coeffs[0];
    }
    
    double evaluate(double x){
        double tmp = 0;
        for (int i = coeffs.length-1; i>0; i--){
            tmp += coeffs[i]*java.lang.Math.pow(x, i);
        }
        return tmp + coeffs[0];
    }

    MyPolynomial add(MyPolynomial p){
        double[] tmpC = this.coeffs;
        for (int i = 0; i<coeffs.length; i++){
            tmpC[i]+=p.coeffs[i];
        }
        MyPolynomial tmpP = new MyPolynomial(tmpC);
        return tmpP;
    }
}

class MyPolynomialDemo{
    public static void main(String[] args) {
        double[] coefficients = {1.2,3.4,5.6,7.8};
        MyPolynomial p1 = new MyPolynomial(coefficients);

        System.out.println("Given Polynomial = "+p1.to_string());
        System.out.println("Degree = "+p1.getDegree());
        System.out.println("Value at 2.0 = "+p1.evaluate(2.0));
        MyPolynomial sum = p1.add(p1);
        System.out.println("Sum p+p = "+sum.to_string());
    }
}

******************************************************************************************